{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Strelka","text":"<p>Strelka is a real-time, container-based file scanning system used for threat hunting, threat detection, and incident response. Originally based on the design established by Lockheed Martin's Laika BOSS and similar projects, Strelka's purpose is to perform file extraction and metadata collection at enterprise scale.</p> <p>Strelka differs from its sibling projects in a few significant ways:</p> <ul> <li>Core codebase is Go and Python 3.9+ </li> <li>Server components run in containers for ease and flexibility of deployment </li> <li>OS-native client applications for Windows, Mac, and Linux </li> <li>Built using libraries and formats that allow cross-platform, cross-language support</li> </ul>"},{"location":"GettingStarted/GettingStartedInstallation.html","title":"Installation","text":""},{"location":"GettingStarted/GettingStartedInstallation.html#installation","title":"Installation","text":"<p>Strelka can be installed on any system that can run containers. For convenience, the project ships with docker-compse configuration files for standing up a \"quickstart\" cluster (found under the <code>build/</code> directory). We do not recommend using and do not plan to support OS-native installations.</p>"},{"location":"GettingStarted/GettingStartedInstallation.html#client-install","title":"Client Install","text":"<p>Strelka's core client apps are written in Go and can be run natively on a host or inside of a container. The following are multiple ways to install each of the apps.</p>"},{"location":"GettingStarted/GettingStartedInstallation.html#strelka-fileshot-build","title":"strelka-fileshot (build)","text":"<ol> <li>Build the binary directly from github     <pre><code>go build github.com/target/strelka/src/go/cmd/strelka-fileshot\n</code></pre></li> </ol>"},{"location":"GettingStarted/GettingStartedInstallation.html#strelka-fileshot-build_1","title":"strelka-fileshot (build)","text":"<ol> <li> <p>Clone this repository     <pre><code>git clone https://github.com/target/strelka.git /opt/strelka/\n</code></pre></p> </li> <li> <p>Build the application     <pre><code>cd /opt/strelka/src/go/cmd/strelka-fileshot/\ngo build -o strelka-fileshot .\n</code></pre></p> </li> </ol>"},{"location":"GettingStarted/GettingStartedInstallation.html#strelka-fileshot-container","title":"strelka-fileshot (container)","text":"<ol> <li> <p>Clone this repository     <pre><code>git clone https://github.com/target/strelka.git /opt/strelka/\n</code></pre></p> </li> <li> <p>Build the container     <pre><code>cd /opt/strelka/\ndocker build -f build/go/fileshot/Dockerfile -t strelka-fileshot .\n</code></pre></p> </li> </ol>"},{"location":"GettingStarted/GettingStartedInstallation.html#strelka-oneshot-build-the-binary-directly-from-github","title":"strelka-oneshot (Build the binary directly from github)","text":"<ol> <li>Build the binary     <pre><code>go build github.com/target/strelka/src/go/cmd/strelka-oneshot\n</code></pre></li> </ol>"},{"location":"GettingStarted/GettingStartedInstallation.html#strelka-oneshot-build","title":"strelka-oneshot (build)","text":"<ol> <li> <p>Clone this repository     <pre><code>git clone https://github.com/target/strelka.git /opt/strelka/\n</code></pre></p> </li> <li> <p>Build the application     <pre><code>cd /opt/strelka/src/go/cmd/strelka-oneshot/\ngo build -o strelka-oneshot .\n</code></pre></p> </li> </ol>"},{"location":"GettingStarted/GettingStartedInstallation.html#strelka-oneshot-container","title":"strelka-oneshot (container)","text":"<ol> <li> <p>Clone this repository     <pre><code>git clone https://github.com/target/strelka.git /opt/strelka/\n</code></pre></p> </li> <li> <p>Build the container     <pre><code>cd /opt/strelka/\ndocker build -f build/go/oneshot/Dockerfile -t strelka-oneshot .\n</code></pre></p> </li> </ol>"},{"location":"GettingStarted/GettingStartedInstallation.html#strelka-filestream-build-the-binary-directly-from-github","title":"strelka-filestream (Build the binary directly from github)","text":"<ol> <li>Build the binary     <pre><code>go build github.com/target/strelka/src/go/cmd/strelka-filestream\n</code></pre></li> </ol>"},{"location":"GettingStarted/GettingStartedInstallation.html#strelka-filestream-build","title":"strelka-filestream (build)","text":"<ol> <li> <p>Clone this repository     <pre><code>git clone https://github.com/target/strelka.git /opt/strelka/\n</code></pre></p> </li> <li> <p>Build the application     <pre><code>cd /opt/strelka/src/go/cmd/strelka-filestream/\ngo build -o strelka-filestream .\n</code></pre></p> </li> </ol>"},{"location":"GettingStarted/GettingStartedInstallation.html#strelka-filestream-container","title":"strelka-filestream (container)","text":"<ol> <li> <p>Clone this repository     <pre><code>git clone https://github.com/target/strelka.git /opt/strelka/\n</code></pre></p> </li> <li> <p>Build the container     <pre><code>cd /opt/strelka/\ndocker build -f build/go/filestream/Dockerfile -t strelka-filestream .\n</code></pre></p> </li> </ol>"},{"location":"GettingStarted/GettingStartedInstallation.html#server-install","title":"Server Install","text":"<p>Strelka's core server components are written in Go and Python 3.9+ and are run from containers. The simplest way to run them is to use docker-compose -- see <code>build/docker-compose.yaml</code> for a sample configuration.</p>"},{"location":"GettingStarted/GettingStartedInstallation.html#docker","title":"Docker","text":"<ol> <li> <p>Clone this repository     <pre><code>git clone https://github.com/target/strelka.git /opt/strelka/\n</code></pre></p> </li> <li> <p>Build the cluster     ```sh     cd /opt/strelka/     docker-compose -f build/docker-compose.yaml up -d</p> </li> </ol>"},{"location":"GettingStarted/GettingStartedQuickstart.html","title":"Quickstart","text":"<p>By default, Strelka is configured to use a minimal \"quickstart\" deployment that allows users to test the system.  This configuration is not recommended for production deployments, but may suffice for environments with very low  file volume (&lt;50k files per day). </p> <p>Using two Terminal windows, do the following:</p>"},{"location":"GettingStarted/GettingStartedQuickstart.html#quickstart-steps","title":"Quickstart Steps","text":""},{"location":"GettingStarted/GettingStartedQuickstart.html#step-1-install-prerequisites","title":"Step 1: Install Prerequisites","text":"<pre><code># Ubuntu 23.04\nsudo apt install -y wget git docker docker-compose golang jq &amp;&amp; \\\nsudo usermod -aG docker $USER &amp;&amp; \\\nnewgrp docker\n</code></pre>"},{"location":"GettingStarted/GettingStartedQuickstart.html#step-2-download-strelka","title":"Step 2: Download Strelka","text":"<pre><code>git clone https://github.com/target/strelka.git &amp;&amp; \\\ncd strelka\n</code></pre>"},{"location":"GettingStarted/GettingStartedQuickstart.html#step-3-download-and-install-preferred-yara-rules-optional","title":"Step 3: Download and Install Preferred YARA Rules (Optional)","text":"<pre><code>rm configs/python/backend/yara/rules.yara &amp;&amp; \\\ngit clone https://github.com/Yara-Rules/rules.git configs/python/backend/yara/rules/ &amp;&amp; \\\necho 'include \"./rules/index.yar\"' &gt; configs/python/backend/yara/rules.yara\n</code></pre>"},{"location":"GettingStarted/GettingStartedQuickstart.html#step-4a-pull-precompiled-images-and-start-strelka","title":"Step 4a: Pull Precompiled Images and Start Strelka","text":"<p>Strelka UI: Skip Go Build</p> <p>You can skip the <code>go build</code> process and use the <code>Strelka UI</code> at <code>http://0.0.0.0:9980</code> to analyze files.</p> <pre><code>docker-compose -f build/docker-compose-no-build.yaml up -d &amp;&amp; \\\ngo build github.com/target/strelka/src/go/cmd/strelka-oneshot\n</code></pre>"},{"location":"GettingStarted/GettingStartedQuickstart.html#step-4b-build-and-start-strelka","title":"Step 4b: Build and Start Strelka","text":"<p>Strelka UI: Skip Go Build</p> <p>You can skip the <code>go build</code> process and use the <code>Strelka UI</code> at <code>http://0.0.0.0:9980</code> to analyze files.</p> <pre><code>docker-compose -f build/docker-compose.yaml build &amp;&amp; \\\ndocker-compose -f build/docker-compose.yaml up -d &amp;&amp; \\\ngo build github.com/target/strelka/src/go/cmd/strelka-oneshot\n</code></pre>"},{"location":"GettingStarted/GettingStartedQuickstart.html#step-5-prepare-a-file-to-analyze","title":"Step 5: Prepare a File to Analyze","text":"<p>Use any malware sample, or other file you'd like Strelka to analyze.</p> <pre><code>wget https://github.com/ytisf/theZoo/raw/master/malware/Binaries/Win32.Emotet/Win32.Emotet.zip -P samples/\n</code></pre>"},{"location":"GettingStarted/GettingStartedQuickstart.html#step-6-analyze-the-file-with-strelka-using-the-dockerized-oneshot","title":"Step 6: Analyze the File with Strelka Using the Dockerized Oneshot","text":"<pre><code>./strelka-oneshot -f samples/Win32.Emotet.zip -l - | jq\n</code></pre>"},{"location":"GettingStarted/GettingStartedQuickstart.html#whats-happening-here","title":"What's happening here?","text":"<ol> <li>Strelka determined that the submitted file was an encrypted ZIP (See: [backend.yaml])</li> <li><code>ScanEncryptedZip</code> used a dictionary to crack the ZIP file password, and extract the compressed file</li> <li>The extracted file was sent back into the Strelka pipeline by the scanner, and Strelka determined that the extracted file was an EXE</li> <li><code>ScanPe</code> dissected the EXE file and added useful metadata to the output</li> <li><code>ScanYara</code> analyzed the EXE file, using the provided rules, and added numerous matches to the output, some indicating the file might be malicious</li> </ol> <p>The following output has been edited for brevity.</p> <p><pre><code>{\n  \"file\": {\n    \"depth\": 0,\n    \"flavors\": {\n      \"mime\": [\"application/zip\"],\n      \"yara\": [\"encrypted_zip\", \"zip_file\"]\n    },\n    \"scanners\": [\n      \"ScanEncryptedZip\",\n      \"ScanEntropy\",\n      \"ScanFooter\",\n      \"ScanHash\",\n      \"ScanHeader\",\n      \"ScanYara\",\n      \"ScanZip\"\n    ]\n  },\n  \"scan\": {\n    \"encrypted_zip\": {\n      \"cracked_password\": \"infected\",\n      \"elapsed\": 0.114269,\n      \"total\": {\"extracted\": 1, \"files\": 1}\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"file\": {\n    \"depth\": 1,\n    \"flavors\": {\n      \"mime\": [\"application/x-dosexec\"],\n      \"yara\": [\"mz_file\"]\n    },\n    \"name\": \"29D6161522C7F7F21B35401907C702BDDB05ED47.bin\",\n    \"scanners\": [\n      \"ScanEntropy\",\n      \"ScanFooter\",\n      \"ScanHash\",\n      \"ScanHeader\",\n      \"ScanPe\",\n      \"ScanYara\"\n    ]\n  },\n  \"scan\": {\n    \"pe\": {\n      \"address_of_entry_point\": 5168,\n      \"base_of_code\": 4096,\n      \"base_of_data\": 32768,\n      \"checksum\": 47465,\n      \"compile_time\": \"2015-03-31T08:53:51\",\n      \"elapsed\": 0.013076,\n      \"file_alignment\": 4096,\n      \"file_info\": {\n        \"company_name\": \"In CSS3\",\n        \"file_description\": \"Note: In CSS3, the text-decoration property is a shorthand property for text-decoration-line, text-decoration-color, and text-decoration-style, but this is currently.\",\n        \"file_version\": \"1.00.0065\",\n        \"fixed\": {\"operating_systems\": [\"WINDOWS32\"]},\n        \"internal_name\": \"Callstb\",\n        \"original_filename\": \"NOFAstb.exe\",\n        \"product_name\": \"Goodreads\",\n        \"product_version\": \"1.00.0065\",\n        \"var\": {\"character_set\": \"Unicode\", \"language\": \"U.S. English\"}\n      }\n    },\n    \"yara\": {\n      \"elapsed\": 0.068918,\n      \"matches\": [\n        \"SEH__vba\",\n        \"SEH_Init\",\n        \"Big_Numbers1\",\n        \"IsPE32\",\n        \"IsWindowsGUI\",\n        \"HasOverlay\",\n        \"HasRichSignature\",\n        \"Microsoft_Visual_Basic_v50v60\",\n        \"Microsoft_Visual_Basic_v50\",\n        \"Microsoft_Visual_Basic_v50_v60\",\n        \"Microsoft_Visual_Basic_v50_additional\",\n        \"Microsoft_Visual_Basic_v50v60_additional\"\n      ],\n      \"tags\": [\n        \"AntiDebug\",\n        \"SEH\",\n        \"Tactic_DefensiveEvasion\",\n        \"Technique_AntiDebugging\",\n        \"SubTechnique_SEH\",\n        \"PECheck\",\n        \"PEiD\"\n      ]\n    }\n  }\n}\n</code></pre></p>"},{"location":"GettingStarted/GettingStartedQuickstart.html#fileshot-ui","title":"Fileshot UI","text":"<p><code>Strelka's UI</code> is available when you build the provided containers. This web interface allows you to upload files to Strelka and capture the events, which are stored locally.</p> <p>Navigate to http://localhost:9980/ and use the login strelka/strelka.</p> <p></p> <p></p> <p></p>"},{"location":"Strelka/StrelkaFaq.html","title":"FAQ","text":""},{"location":"Strelka/StrelkaFaq.html#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"Strelka/StrelkaFaq.html#who-is-strelka","title":"\"Who is Strelka?\"","text":"<p>Strelka is one of the second generation Soviet space dogs to achieve orbital spaceflight -- the name is an homage to Lockheed Martin's Laika BOSS, one of the first public projects of this type and from which Strelka's core design is based.</p>"},{"location":"Strelka/StrelkaFaq.html#why-would-i-want-a-file-scanning-system","title":"\"Why would I want a file scanning system?\"","text":"<p>File metadata is an additional pillar of data (alongside network, endpoint, authentication, and cloud) that is effective in enabling threat hunting, threat detection, and incident response and can help event analysts and incident responders bridge visibility gaps in their environment. This type of system is especially useful for identifying threat actors during KC3 and KC7. For examples of what Strelka can do, please read the use cases.</p>"},{"location":"Strelka/StrelkaFaq.html#should-i-switch-from-my-current-file-scanning-system-to-strelka","title":"\"Should I switch from my current file scanning system to Strelka?\"","text":"<p>It depends -- we recommend reviewing the features of each and choosing the most appropriate tool for your needs. We believe the most significant motivating factors for switching to Strelka are: * More scanners (40+ at release) and file types (60+ at release) than related projects * Modern codebase (Go and Python 3.9+) * Server components run in containers for ease and flexibility of deployment * Performant, OS-native client applications compatible with Windows, Mac, and Linux * OS-native client applications for Windows, Mac, and Linux * Built using libraries and formats that allow cross-platform, cross-language support</p>"},{"location":"Strelka/StrelkaFaq.html#are-strelkas-scanners-compatible-with-laika-boss-file-scanning-framework-or-assemblyline","title":"\"Are Strelka's scanners compatible with Laika BOSS, File Scanning Framework, or Assemblyline?\"","text":"<p>Due to differences in design, Strelka's scanners are not directly compatible with Laika BOSS, File Scanning Framework, or Assemblyline. With some effort, most scanners can likely be ported to the other projects.</p>"},{"location":"Strelka/StrelkaFaq.html#is-strelka-an-intrusion-detection-system-ids","title":"\"Is Strelka an intrusion detection system (IDS)?\"","text":"<p>Strelka shouldn't be thought of as an IDS, but it can be used for threat detection through YARA rule matching and downstream metadata interpretation. Strelka's design follows the philosophy established by other popular metadata collection systems (Bro, Sysmon, Volatility, etc.): it extracts data and leaves the decision-making up to the user.</p>"},{"location":"Strelka/StrelkaFaq.html#does-it-work-at-scale","title":"\"Does it work at scale?\"","text":"<p>Everyone has their own definition of \"at scale,\" but we have been using Strelka and systems like it to scan up to 250 million files each day for over a year and have never reached a point where the system could not scale to our needs -- as file volume and diversity increases, horizontally scaling the system should allow you to scan any number of files.</p>"},{"location":"Strelka/StrelkaFaq.html#doesnt-this-use-a-lot-of-bandwidth","title":"\"Doesn't this use a lot of bandwidth?\"","text":"<p>Maybe! Strelka's client applications provide opportunities for users to use as much or as little bandwidth as they want.</p>"},{"location":"Strelka/StrelkaFaq.html#should-i-run-my-strelka-cluster-on-my-brosuricata-network-sensor","title":"\"Should I run my Strelka cluster on my Bro/Suricata network sensor?\"","text":"<p>No! Strelka clusters run CPU-intensive processes that will negatively impact system-critical applications like Bro and Suricata. If you want to integrate a network sensor with Strelka, then use the [<code>filestream</code>] client application. This utility is capable of sending millions of files per day from a single network sensor to a Strelka cluster without impacting system-critical applications.</p>"},{"location":"Strelka/StrelkaFaq.html#i-have-other-questions","title":"\"I have other questions!\"","text":"<p>Please file an issue or contact the project team at TTS-CFC-OpenSource@target.com.</p>"},{"location":"Strelka/StrelkaUseCases.html","title":"Use Cases","text":""}]}